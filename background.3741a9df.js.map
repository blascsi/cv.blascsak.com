{"version":3,"sources":["src/js/background.js"],"names":["colors","animationController","createAnimationController","canvas","sizes","velocity","backgroundFillRatio","Error","ctx","animationFrame","getContext","circles","opacity","createCircle","maxX","maxY","radius","size","x","generateRandom","y","vx","vy","clearCanvas","globalCompositeOperation","globalAlpha","fillStyle","background","fillRect","width","height","resizeCanvas","oldWidth","oldHeight","fixBackgroundOnResize","window","innerWidth","innerHeight","length","widthRatio","heightRatio","forEach","element","drawCircle","color","beginPath","arc","Math","PI","closePath","fill","draw","cancelAnimationFrame","requestAnimationFrame","moveBackgroundElements","circle","initialzieController","generateBackground","elements","fillArea","filledArea","Object","entries","ratio","circleArea","push","calculateCircleArea","resize","updateOpacity","aboveTheFoldAreaVisible","scrollY","document","getElementById","small","medium","large","min","max","floor","random","addEventListener"],"mappings":"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","file":"background.3741a9df.js","sourceRoot":"..","sourcesContent":["(function () {\n  const colors = {\n    background: '#0E0E0E',\n    circle: '#141414',\n  };\n  const circleSizes = {\n    small: 0.05,\n    medium: 0.07,\n    large: 0.1,\n  };\n  const circleVelocity = 0.1;\n  const animationController = createAnimationController(\n    document.getElementById('background'),\n    colors,\n    circleSizes,\n    circleVelocity,\n    0.5\n  );\n\n  function generateRandom(min, max) {\n    if (min > max)\n      throw new Error(\n        'Invalid arguments given. Minimum cannot be greater than the maximum.'\n      );\n    if (min === max) return min;\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  function calculateCircleArea(radius) {\n    return Math.PI * radius ** 2;\n  }\n\n  function createAnimationController(\n    canvas,\n    colors,\n    sizes,\n    velocity,\n    backgroundFillRatio\n  ) {\n    if (backgroundFillRatio > 1 || backgroundFillRatio < 0)\n      throw new Error('Background fill ratio should be between 0 and 1');\n\n    const ctx = canvas.getContext('2d');\n    let animationFrame;\n    let circles = [];\n    let opacity = 1;\n\n    function initialzieController() {\n      resizeCanvas();\n      generateBackground();\n    }\n\n    function generateBackground() {\n      const elements = [];\n\n      const fillArea =\n        canvas.width *\n        backgroundFillRatio *\n        (canvas.height * backgroundFillRatio);\n      let filledArea = 0;\n\n      while (filledArea < fillArea) {\n        for (let [size, ratio] of Object.entries(sizes)) {\n          const circleArea = calculateCircleArea(canvas.width * ratio);\n          if (circleArea + filledArea < fillArea || size === 'small') {\n            elements.push(\n              createCircle(\n                canvas.width,\n                canvas.height,\n                canvas.width * ratio,\n                size\n              )\n            );\n            filledArea += circleArea;\n          }\n        }\n      }\n\n      circles = elements;\n    }\n\n    function fixBackgroundOnResize(maxX, maxY, oldWidth, oldHeight) {\n      if (!circles || !circles.length) return;\n\n      if (oldWidth && oldHeight) {\n        const widthRatio = maxX / oldWidth;\n        const heightRatio = maxY / oldHeight;\n        circles.forEach((element) => {\n          element.x = element.x * widthRatio;\n          element.y = element.y * heightRatio;\n        });\n      }\n\n      circles.forEach((element) => {\n        element.radius = maxX * sizes[element.size];\n      });\n    }\n\n    function createCircle(maxX, maxY, radius, size) {\n      return {\n        x: generateRandom(radius, maxX - radius),\n        y: generateRandom(radius, maxY - radius),\n        radius,\n        size,\n        vx: !!generateRandom(0, 1) ? velocity : -velocity,\n        vy: !!generateRandom(0, 1) ? velocity : -velocity,\n      };\n    }\n\n    function moveBackgroundElements() {\n      for (let circle of circles) {\n        if (\n          circle.x + circle.radius >= canvas.width ||\n          circle.x - circle.radius <= 0\n        ) {\n          circle.x =\n            circle.x - circle.radius <= 0\n              ? 0 + circle.radius\n              : canvas.width - circle.radius;\n          circle.vx = -circle.vx;\n        }\n        if (\n          circle.y + circle.radius >= canvas.height ||\n          circle.y - circle.radius <= 0\n        ) {\n          circle.y =\n            circle.y - circle.radius <= 0\n              ? 0 + circle.radius\n              : canvas.height - circle.radius;\n          circle.vy = -circle.vy;\n        }\n\n        circle.x += circle.vx;\n        circle.y += circle.vy;\n        drawCircle(circle, colors.circle);\n      }\n    }\n\n    function clearCanvas() {\n      ctx.globalCompositeOperation = 'source-over';\n      ctx.globalAlpha = 1;\n      ctx.fillStyle = colors.background;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    function resizeCanvas() {\n      const oldWidth = canvas.width;\n      const oldHeight = canvas.height;\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      return fixBackgroundOnResize(\n        window.innerWidth,\n        window.innerHeight,\n        oldWidth,\n        oldHeight\n      );\n    }\n\n    function shouldUpdate() {\n      return opacity > 0;\n    }\n\n    function updateOpacity() {\n      const aboveTheFoldAreaVisible =\n        (window.innerHeight - window.scrollY) / window.innerHeight;\n      opacity = aboveTheFoldAreaVisible >= 0 ? aboveTheFoldAreaVisible : 0;\n    }\n\n    function drawCircle({ x, y, radius }, color) {\n      ctx.globalCompositeOperation = 'lighter';\n      ctx.globalAlpha = opacity;\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, Math.PI * 2);\n      ctx.closePath();\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n\n    function draw() {\n      if (animationFrame) {\n        window.cancelAnimationFrame(animationFrame);\n        animationFrame = null;\n      }\n      // If the animation is not in frame, we should not\n      // calculate new positions, and draw the circles\n      // just clear the canvas and wait for it to be in frame\n      if (!shouldUpdate()) {\n        clearCanvas();\n        animationFrame = window.requestAnimationFrame(draw);\n        return;\n      }\n\n      clearCanvas();\n      moveBackgroundElements();\n      animationFrame = window.requestAnimationFrame(draw);\n    }\n\n    function resize() {\n      if (animationFrame) {\n        window.cancelAnimationFrame(animationFrame);\n        animationFrame = null;\n      }\n\n      resizeCanvas();\n      draw();\n    }\n\n    return {\n      initialzieController,\n      draw,\n      resize,\n      updateOpacity,\n    };\n  }\n\n  animationController.initialzieController();\n  window.requestAnimationFrame(animationController.draw);\n  window.addEventListener('resize', animationController.resize);\n  window.addEventListener('orientationchange', animationController.resize);\n  window.addEventListener('scroll', animationController.updateOpacity);\n})();\n"]}